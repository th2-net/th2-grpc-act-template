/*
 * Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "th2_grpc_common/common.proto";
import "th2_grpc_act_template/act_template.proto";

option java_multiple_files = true;
option java_package = "com.exactpro.th2.act.grpc";

service ActTyped {
  /* This action executes next steps:
      1) Registers checkpoint in Verifier microservice
      2) Sends passed message as is to Connectivity microservice
      3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
          from Connectivity microservice
      4) Returns the message repose and the Checkpoint */
  rpc placeOrderFIX (PlaceMessageRequestTyped) returns (Checkpoint) {
  }

  /*Send fix message without response awaiting */
  rpc sendMessage (PlaceMessageRequestTyped) returns (SendMessageResponse) {
  }

  rpc placeQuoteRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteFIX (PlaceMessageRequestTyped) returns (PlaceMessageMultiResponseTyped) {
  }

  rpc placeOrderMassCancelRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteCancelFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteResponseFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeSecurityListRequest (PlaceMessageRequestTyped) returns (PlaceSecurityListResponse) {
  }
}

message NoPartyIDs {
  string party_id = 1;
  string party_id_source = 2;
  int32 party_role = 3;
}

message TradingParty {
  repeated NoPartyIDs no_party_ids = 1;
}

message NewOrderSingle {
  string security_id = 1;
  string security_id_source = 2;
  string ord_type = 3;
  int32 account_type = 4;
  string order_capacity = 5;
  float order_qty = 6;
  float display_qty = 7;
  float price = 8;
  string cl_ord_id = 9;
  string secondary_cl_ord_id = 10;
  string side = 11;
  string time_in_force = 12;
  string transact_time = 13;
  TradingParty trading_party = 14;
  string symbol = 15;
}

message Quote {
  message QuoteQualifier {
    string quote_qualifier = 1;
  }

  repeated QuoteQualifier no_quote_qualifiers = 1;
  float offer_px = 2;
  float offer_size = 3;
  string quote_id = 4;
  string symbol = 5;
  string security_id_source = 6;
  string bid_size = 7;
  float bid_px = 8;
  string security_id = 9;
  repeated NoPartyIDs no_party_ids = 10;
  int32 quote_type = 11;
}

message SecurityListRequest {
  int32 security_list_request_type = 1;
  string security_req_id = 2;
}

message RequestMessageTyped {
  oneof kind {
    NewOrderSingle new_order_single = 1;
    Quote quote = 2;
    SecurityListRequest security_list_request = 3;
  }
}


message Header {
  string begin_string = 1;
  string sender_comp_id = 2;
  string sending_time = 3;
  int32 msg_seq_num = 4;
  int32 body_length = 5;
  string msg_type = 6;
  string target_comp_id = 7;
}

message QuoteStatusReport {
  string quote_id = 1;
  int32 quote_status = 2;
  string security_id = 3;
  string security_id_source = 4;
  string symbol = 5;
  string text = 6;
}

message QuoteAck {
  string rfqid = 1;
  string text = 2;
}

message OrderMassCancelReport {
  string cl_ord_id = 1;
  string text = 2;
}

message MassQuoteAcknowledgement {
  string quote_id = 1;
  string text = 2;
}

message ResponseMessageTyped {
  oneof kind {
    QuoteStatusReport quote_status_report = 3;
    Quote quote = 4;
    QuoteAck quote_ack = 5;
    OrderMassCancelReport order_mass_cancel_report = 6;
    MassQuoteAcknowledgement mass_quote_acknowledgement = 7;
  }
}

message PlaceMessageRequestTyped {
  MessageMetadata metadata = 1;
  RequestMessageTyped message_typed = 2;
  EventID parent_event_id = 3;
  string description = 4;
}

message PlaceMessageResponseTyped {
  MessageMetadata metadata = 1;
  ResponseMessageTyped response_message = 2;
  RequestStatus status = 4;
  Checkpoint checkpoint_id = 5;
}

message PlaceMessageMultiResponseTyped {
  repeated PlaceMessageResponseTyped place_message_response_typed = 1;
}
