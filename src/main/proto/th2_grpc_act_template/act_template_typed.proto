/*
 * Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "th2_grpc_common/common.proto";
import "th2_grpc_act_template/act_template.proto";

option java_multiple_files = true;
option java_package = "com.exactpro.th2.act.grpc";

service ActTyped {
  /* This action executes next steps:
      1) Registers checkpoint in Verifier microservice
      2) Sends passed message as is to Connectivity microservice
      3) Waits Execution Report or Business Message Reject with the same ClOrdID as in passed message
          from Connectivity microservice
      4) Returns the message repose and the Checkpoint */
  rpc placeOrderFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTypedList) {
  }

  /*Send fix message without response awaiting */
  rpc sendMessage (PlaceMessageRequestTyped) returns (SendMessageResponse) {
  }

  rpc placeQuoteRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeOrderMassCancelRequestFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteCancelFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }

  rpc placeQuoteResponseFIX (PlaceMessageRequestTyped) returns (PlaceMessageResponseTyped) {
  }
}

message NoPartyIDs {
  string party_id = 2;
  string party_id_source = 3;
  int32 party_role = 4;
}

message TradingParty {
  repeated NoPartyIDs no_party_ids = 1;
}

message NewOrderSingle {
  string security_id = 1;
  string security_id_source = 2;
  string ord_type = 3;
  int32 account_type = 4;
  string order_capacity = 5;
  float order_qty = 6;
  float display_qty = 7;
  float price = 8;
  string cl_ord_id = 9;
  string secondary_cl_ord_id = 10;
  string side = 11;
  string time_in_force = 12;
  string transact_time = 13;
  TradingParty trading_party = 14;
}

message ExecutionReport {
  string security_id = 1;
  string security_id_source = 2;
  string ord_type = 3;
  int32 account_type = 4;
  string order_capacity = 5;
  string cl_ord_id = 6;
  float order_qty = 7;
  float leaves_qty = 8;
  string side = 9;
  float cum_qty = 10;
  string exec_type = 11;
  string ord_status = 12;
  TradingParty trading_party = 13;
  string exec_id = 14;
  float price = 15;
  string order_id = 16;
  string text = 17;
  string time_in_force = 18;
  string transact_time = 19;
}

message BusinessMessageReject {
  string ref_msg_type = 2;
  int32 business_reject_reason = 3;
  string business_reject_ref_id = 4;
  int32 ref_seq_num = 5;
  string text = 6;
}

message QuoteStatusReport {
  string quote_req_id = 1;
  string text = 2;
}

message QuoteAck {
  string rfqid = 1;
  string text = 2;
}

message OrderMassCancelReport {
  string cl_ord_id = 1;
  string text = 2;
}

message MassQuoteAcknowledgement {
  string quote_id = 1;
  string text = 2;
}

message ResponseMessageTyped {
  oneof kind {
    BusinessMessageReject business_message_reject = 1;
    ExecutionReport execution_report = 2;
    QuoteStatusReport quote_status_report = 3;
    QuoteAck quote_ack = 4;
    OrderMassCancelReport order_mass_cancel_report = 5;
    MassQuoteAcknowledgement mass_quote_acknowledgement = 6;
  }
}

message PlaceMessageRequestTyped {
  MessageMetadata metadata = 1;
  NewOrderSingle message_typed = 2;
  EventID parent_event_id = 3;
  string description = 4;
}

message PlaceMessageResponseTyped {
  MessageMetadata metadata = 1;
  ResponseMessageTyped response_message_typed = 2;
  EventID parent_event_id = 3;
  RequestStatus status = 4;
  Checkpoint checkpoint_id = 5;
}

message PlaceMessageResponseTypedList {
  repeated PlaceMessageResponseTyped place_message_response_typed = 1;
}
